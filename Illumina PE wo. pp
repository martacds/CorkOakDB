#!/bin/bash
##
#
# Pipeline for Illumina datasets of RNA-Seq.
# Without any pre-processing. Assumes that the samples were uploaded to NCBI already pre-processed.
#
# fastq-dump : downloads the .fastq files from the SRA number
# hisat2 : maps sequences to genome built previously (hisat2_build)
# samtools : converts the .sam into .bam (sorted file)
# featureCounts : outputs raw counts of alignment
# stringtie : outputs TPM/FPKM counts
#
#
# Marta Silva, ITQB
# marcsilva@itqb.unl.pt
#
############# CONFIGURATION #############
#
### FOLDERS ###
HOME=/home/martasilva
DATA=/home/martasilva/ILLdata
BIO=/home/martasilva/ILLdata/BioProjects #folder for output files, divided by BioProject
FASTQFILES=/home/martasilva/ILLdata/ILLfastq #folder for .fastq files
### TOOLS ###
FASTQDUMP=/home/martasilva/tools/SRAtoolkit-2.9.4/bin
HISAT=/home/martasilva/tools/HISAT2-2.1.0
SAMTOOLS=/usr/bin
FEATURECOUNTS=/home/martasilva/tools/SubRead-v1.6.3/bin
STRINGTIE=/home/martasilva/tools/StringTie-v1.3.5
### GENOME ###
GTF=/home/martasilva #folder for genome file
GENOME=CorkOak1.0_genomic.gtf #name of the genome file

############## FASTQ-DUMP #############
##
## Built using:
## https://trace.ncbi.nlm.nih.gov/Traces/sra/sra.cgi?view=toolkit_doc&f=fastq-dump
## https://trace.ncbi.nlm.nih.gov/Traces/sra/sra.cgi?view=toolkit_doc&f=std
##
## Downloads .fastq files from a list of SRA numbers
##
## Requires the download of the SRA Toolkit. To do so remotely, use command wget followed by the URL.
## After the download, alter the first line PATH to direct to the folder where fastq-dump is located.
##
## When using, indicate path to the command followed by the list of SRA numbers.
## e.g. ./dwnfastq.sh listSRAnumbers.txt
##

counter=0
for SRA_ID in `cat $1`
do
   counter=$((counter+1))
   PROJECTNAME=`echo $SRA_ID | cut -c1-6`

   echo ' '
   echo '~~~~~~~~~~~~' $counter ' FASTQ-DUMP ' $SRA_ID '~~~~~~~~~~~~'
   echo ' '
   echo '             ...**&**...'
   echo ' '

   $FASTQDUMP/fastq-dump -I --split-files -O $FASTQFILES $SRA_ID

done

############# AND I SAID LET THERE BE LISTS AND FOLDERS #############
#
# creates lists for the filenames and projectnames
# creates the BioProjects and logs folders
#
   cd $FASTQFILES
   ls | grep fastq | cut --delimiter=. -f1 >> $DATA/listfilenamesILL.txt
   ls | grep fastq | cut -c1-6 | sort | uniq >> $DATA/listprojectnamesILL.txt

input="$DATA/listfilenamesILL.txt"
while IFS= read -r FILENAME
do
   counter=$((counter+1))
   PROJECTNAME=`echo $FILENAME | cut -c1-6`

   cd $DATA
   mkdir -p BioProjects
   cd BioProjects
   mkdir -p $PROJECTNAME
   cd $PROJECTNAME
   mkdir -p logs

done < "$input"

############ HISAT2 #############
#
# Built using:
# http://ccb.jhu.edu/software/hisat2/manual.shtml#running-hisat2
#
# Runs HISAT2 on the .fastq files.
# Aligns to a genome. Outputs a .sam file.
#
# Necessary to build an index using hisat2-build
#
# Beginning of the illumina datasets' SRAs is specified so it doesnt run on the 454 datasets.
# This is insanely ugly and an alternative is essential.

counter=0
input="$DATA/listfilenamesILL.txt"
while IFS= read -r FILENAME
do
   counter=$((counter+1))
   PROJECTNAME=`echo $FILENAME | cut -c1-6`

   echo ' '
   echo '~~~~~~~~~~~~' $counter $PROJECTNAME '||' $FILENAME 'HISAT2 ~~~~~~~~~~~~'
   echo ' '
   echo '            ......**&**......'
   echo ' '

   cd $FASTQFILES
   $HISAT/hisat2 -t --summary-file $BIO/"$PROJECTNAME"/logs/'loghisat2'$FILENAME'.txt' -x $HISAT/qsuber2018/qsuber2018 -1 *'1.fastq' -2 *'2.fastq' -S $BIO/"$PROJECTNAME"/$FILENAME'.sam'

   cd ..
done < "$input"

############# SAMTOOLS #############
#
# Built using:
# information in ESTsColdHeat_processing
#
# Runs samtools in the .sam files from gmap
# samtools view 'opens' the .sam file
# samtools sort sorts the .sam and outputs as a .bam

counter=0
input="$DATA/listfilenamesILL.txt"
while IFS= read -r FILENAME
do
   counter=$((counter+1))
   PROJECTNAME=`echo $FILENAME | cut -c1-6`

   echo '~~~~~~~~~~~~' $counter $PROJECTNAME '|| SAMTOOLS' $FILENAME '~~~~~~~~~~~~'
   echo ' '
   echo '    ......**&**......'
   echo ' '

   cd $BIO/"$PROJECTNAME"
   $SAMTOOLS/samtools view -bS $FILENAME.sam | $SAMTOOLS/samtools sort -o $FILENAME.bam

   cd ..

done < "$input"

############# FEATURECOUNTS #############
#
# Built using:
# http://bioinf.wehi.edu.au/featureCounts/
#

counter=0
input="$DATA/listprojectnamesILL.txt"
while IFS= read -r PROJECTNAME
do
   counter=$((counter+1))

   echo ' '
   echo '~~~~~~~~~~~~' $counter $PROJECTNAME 'FEATURECOUNTS ~~~~~~~~~~~~'

   cd $BIO/"$PROJECTNAME"
   $FEATURECOUNTS/featureCounts -a $GTF/CorkOak1.0_genomic.gtf -g gene_name -o 'counts'$PROJECTNAME'.txt' $BIO/"$PROJECTNAME"/*'.bam' 2>&1 | tee -a $BIO/"$PROJECTNAME"/logs/'featurecountslog'$PROJECTNAME'.txt'

   cd ..
done < "$input"

############# STRINGTIE #############
#
# Built using:
# https://ccb.jhu.edu/software/stringtie/index.shtml?t=manual
#
# Will give the TPM and FPKM in an abundance file
# Outputs a .gtf file
#
# Needs the indication of a reference genome as a .gtf file

counter=0
input="$DATA/listfilenamesILL.txt"
while IFS= read -r FILENAME
do
   counter=$((counter+1))
   PROJECTNAME=`echo $FILENAME | cut -c1-6`

   echo '~~~~~~~~~~~~~' $counter $PROJECTNAME '|| STRINGTIE' $FILENAME '~~~~~~~~~~~~~'
   echo ' '
   echo '      ......**&**......'

   cd $BIO/"$PROJECTNAME"
   $STRINGTIE/stringtie $BIO/"$PROJECTNAME"/$FILENAME'.bam' -e -B -A $BIO/"$PROJECTNAME"/abundance$FILENAME -G $GTF/CorkOak1.0_genomic.gtf -o $BIO/"$PROJECTNAME"/$FILENAME'.gtf'

   cd ..
done < "$input"

############# HOUSEKEEPING #############
#
# sorts output files into folders divided by tool
#

input="$DATA/listprojectnamesILL.txt"
while IFS= read -r PROJECTNAME
do

   cd $BIO/"$PROJECTNAME"

   mkdir -p hisat2
   mkdir -p bam
   mkdir -p featurecounts
   mkdir -p stringtie


   mv *.bam ./bam
   mv *.sam ./hisat2
   mv abundance* ./stringtie
   mv *.gtf ./stringtie
   mv counts* ./featurecounts

done < "$input"

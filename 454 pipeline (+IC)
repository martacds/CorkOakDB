:
##
#
# Pipeline for 454 datasets of RNA-Seq.
#
# fastq-dump : downloads the .fastq files from the SRA number
# tagcleaner : predicts and removes the tags from the sequence
# sickle : removes low-quality sequence
# prinseq : removes right 5% (Ns), improves overall quality
# gmap : maps sequences to genome built previously (gmap_build)
# samtools : converts the .sam into .bam (sorted file)
# featureCounts : outputs raw counts of alignment
# stringtie : outputs TPM/FPKM counts
#
#
# Marta Silva, ITQB
# marcsilva@itqb.unl.pt
#
#############fastq-dump#############
#
# Built using:
# https://trace.ncbi.nlm.nih.gov/Traces/sra/sra.cgi?view=toolkit_doc&f=fastq-dump
# https://trace.ncbi.nlm.nih.gov/Traces/sra/sra.cgi?view=toolkit_doc&f=std
#
# Downloads .fastq files from a list of SRA numbers
#
# Requires the download of the SRA Toolkit. To do so remotely, use command wget followed by the URL.
# After the download, alter the first line PATH to direct to the folder where fastq-dump is located.
#
# When using, indicate path to the command followed by the list of SRA numbers.
# e.g. ./dwnfastq.sh listSRAnumbers.txt
#
   PATH=$PATH:/data/biodata/tools/fastq-dump/bin/
   export PATH #alter to match localization of fastq-dump

counter=0
for SRA_ID in `cat $1` #list of SRA numbers will function as cat 1
do
   counter=$((counter+1))
   PROJECTNAME=`echo $SRA_ID | cut -c1-6`
   
   echo ' '
   echo '~~~~~~~~~~~~' $counter $PROJECTNAME '|| fastq-dump ' $SRA_ID '~~~~~~~~~~~~'

   fastq-dump -O /data/biodata/454Data/$PROJECTNAME $SRA_ID

done

#############tagcleaner#############
#
# Built using:
# http://tagcleaner.sourceforge.net/manual.html#STANDALONE
#
# Predicts the tag 5' of the .fastq file
# If a tag is present it removes it. If there is no tag, nothing happens.
# In both cases it outputs a file with the prefix 'notag'
#
# Creates a log of the process
# Creates a file to log the numbers and percentages of each command.
# One percentages log per dataset
#

   alias tagcleaner='perl /data/biodata/tools/TagCleaner/tagcleaner.pl'
#Creates an alias, to make the command bellow easier

counter=0
for SRA_ID in `cat $1`
do
   counter=$((counter+1))
   PROJECTNAME=`echo $SRA_ID | cut -c1-6`

   cd /data/biodata/454Data/$PROJECTNAME
   mkdir -p logs #creates the folder for all the dataset's logs
   echo ''

   if [ `echo $SRA_ID | grep RR` ] ; then
   echo '~~~~~~~~~~~~' $counter $PROJECTNAME '|| TAGCLEANER PREDICT' $SRA_ID '~~~~~~~~~~~~'

   tagcleaner -verbose -fastq *RR*.fastq -predict >> ./logs/predict$SRA_ID.txt

   fi

   if [ `grep -s tag5 ./logs/predict$SRA_ID.txt | cut -f2` ] ; then
   echo ' '
   echo '~~~~~~~~~~~~' $counter $PROJECTNAME '|| CLEANING TAG5' $SRA_ID '~~~~~~~~~~~~'
   TAG=$(grep tag5 ./logs/predict"$SRA_ID".txt | cut -f2)
   echo $TAG #echos the predicted tag
   NNN=$(echo "$TAG" | sed 's/N.*//')
   echo $NNN #removed Ns from predicted tag

   tagcleaner -verbose -fastq *.fastq -tag5 $NNN -mm5 1 -out notag$SRA_ID -log ./logs/tagcleanerlog$SRA_ID.txt

#IN/OUT functions as a downstream quality control for sequences/bases removed/lost
   INSEQ=$(grep 'Input sequences' ./logs/tagcleaner*.txt | cut --delimiter=\  -f6)
   OUTSEQ=$(grep 'Output sequences' ./logs/tagcleaner*.txt | cut --delimiter=\  -f6)
   INBAS=$(grep 'Input bases' ./logs/tagcleaner*.txt | cut --delimiter=\  -f6)
   OUTBAS=$(grep 'Output bases' ./logs/tagcleaner*.txt | cut --delimiter=\  -f6)
   echo 'TagCleaner' >> ./logs/logpercentages$SRA_ID.txt
   echo 'INSEQ , OUTSEQ' >> ./logs/logpercentages$SRA_ID.txt
   echo $INSEQ >> ./logs/logpercentages$SRA_ID.txt
   echo $OUTSEQ >> ./logs/logpercentages$SRA_ID.txt
   echo 'Percentage of kept sequences' >> ./logs/logpercentages$SRA_ID.txt
   echo "($OUTSEQ * 100) * $INSEQ" | bc -l >> ./logs/logpercentages$SRA_ID.txt
   echo 'INBAS , OUTBAS' >> ./logs/logpercentages$SRA_ID.txt
   echo $INBAS >> ./logs/logpercentages$SRA_ID.txt
   echo $OUTBAS >> ./logs/logpercentages$SRA_ID.txt
   echo 'Percentage of kept bases' >> ./logs/logpercentages$SRA_ID.txt
   echo "($OUTBAS * 100) * $INBAS" | bc -l >> ./logs/logpercentages$SRA_ID.txt
   cd ..

   elif [ `echo $PROJECTNAME | grep IC` ] ; then #iteration for the IC datasets
   counter=$((counter+1))
   IC={IC10A , IC25C , IC25H , IC42A , IC42HS , IC5C}
   echo '~~~~~~~~~~~~' $counter $PROJECTNAME '|| NO TAG' $IC '~~~~~~~~~~~~'
   echo ' '

   cp *.fastq ./notag$IC.fastq

   echo '  copied with prefix'
   echo ' '
   echo 'TagCleaner' >> ./logs/logpercentages$IC.txt
   echo 'no sequences/bases removed' >> ./logs/logpercentages$IC.txt
   cd ..

   else #iteration for datasets with no tags
   counter=$((counter+1))
   echo ' '
   echo '~~~~~~~~~~~~' $counter $PROJECTNAME '|| NO TAG' $SRA_ID '~~~~~~~~~~~~'
   echo ' '

   cp *.fastq ./notag$SRA_ID.fastq

   echo '	copied with prefix'
   echo ' '
   echo 'TagCleaner' >> ./logs/logpercentages$SRA_ID.txt
   echo 'no sequences/bases removed' >> ./logs/logpercentages$SRA_ID.txt
   cd ..
   fi

done

#############sickle#############
#
# Built using:
# https://github.com/najoshi/sickle
#
# Runs Sickle on the .fastq files form tagcleaner.
# Improves the overall quality of the dataset

   PATH=$PATH:/data/biodata/tools/sickle-master/
   export PATH #alter to match localization of sickle tool

counter=0
for SRA_ID in `cat $1`
do
   PROJECTNAME=`echo $SRA_ID | cut -c1-6`
   counter=$((counter+1))

   cd /data/biodata/454Data/$PROJECTNAME
   echo ' '
   echo '~~~~~~~~~~~~' $counter $PROJECTNAME '|| SICKLE' $SRA_ID '~~~~~~~~~~~~'

   sickle se -q 20 -l 100 -f notag*.fastq -t sanger -o 'sickle'$SRA_ID.fastq | tee ./logs/sicklelog$SRA_ID.txt
# se (single end)- 454, illumina, pe (paired end) - illumina
# -q , quality threshold
# -l , length of window
# -f , input file as .fastq
# -t , codification
# -o , output file
# tee will append the stdout to a .txt file

   INSEQ=`grep 'Total' ./logs/sicklelog*.txt | cut --delimiter=\  -f4`
   OUTSEQ=`grep 'kept' ./logs/sicklelog*.txt | cut --delimiter=\  -f4`
   echo ' ' >> ./logs/logpercentages$SRA_ID.txt
   echo 'Sickle' >> ./logs/logpercentages$SRA_ID.txt
   echo 'INSEQ' >> ./logs/logpercentages$SRA_ID.txt
   echo $INSEQ >> ./logs/logpercentages$SRA_ID.txt
   echo 'OUTSEQ' >> ./logs/logpercentages$SRA_ID.txt
   echo $OUTSEQ >> ./logs/logpercentages$SRA_ID.txt
   echo 'Percentage of kept sequences' >> ./logs/logpercentages$SRA_ID.txt
   echo "($OUTSEQ * 100) * $INSEQ" | bc -l >> ./logs/logpercentages$SRA_ID.txt
   cd ..

done

#############prinseq#############
#
# Built using:
# http://prinseq.sourceforge.net/manual.html#STANDALONE
#
# Runs PrinSeq on the .fastq files from Sickle
# Trims in terms of quality (set as 20) from the left.
# Trims a % form the right (set as 5), which will remove the Ns from the end of the sequence
# Outputs good and bad sequences, and creates a log

   PATH=$PATH:/data/biodata/tools/PrinSeq
   export PATH #alter path to match the localization of the prinseq tool

   alias prinseq='perl /data/biodata/tools/PrinSeq/prinseq-lite.pl'
# Creates an alias to make the command bellow easier

counter=0
for SRA_ID in `cat $1`
do
   PROJECTNAME=`echo $SRA_ID | cut -c1-6`
   counter=$((counter+1))

   cd /data/biodata/454Data/$PROJECTNAME
   echo ' '
   echo '~~~~~~~~~~~~' $counter $PROJECTNAME '|| PRINSEQ' $SRA_ID '~~~~~~~~~~~~'

   prinseq -verbose -trim_qual_left 20 -trim_right_p 5 -fastq sickle*.fastq -out_good 'ps'$SRA_ID -out_bad psBAD$SRA_ID -log ./logs/prinseqlog$SRA_ID.txt
# -verbose , prints process progression to the screen
# -trim_qual_left , trims according to quality starting on the left
# -trim_right_p , trims right end according to percentage of sequence
# -fastq , input file is a .fastq file
# -out_good , outputs the 'good' sequences to a file matching the input
# -out_bad , outputs the 'bad' sequences to a file matching the input
# -log , creates a log of the process

   INSEQ=`grep 'Input sequences' ./logs/prinseqlog*.txt | cut --delimiter=\  -f6`
   OUTSEQ=`grep 'Good sequences' ./logs/prinseqlog*.txt | cut --delimiter=\  -f6`
   INBAS=`grep 'Input bases' ./logs/prinseqlog*.txt | cut --delimiter=\  -f6`
   OUTBAS=`grep 'Good bases' ./logs/prinseqlog*.txt | cut --delimiter=\  -f6`
   echo ' ' >> ./logs/logpercentages$SRA_ID.txt
   echo 'PrinSeq' >> ./logs/logpercentages$SRA_ID.txt
   echo 'INSEQ , OUTSEQ' >> ./logs/logpercentages$SRA_ID.txt
   echo $INSEQ >> ./logs/logpercentages$SRA_ID.txt
   echo $OUTSEQ >> ./logs/logpercentages$SRA_ID.txt
   echo 'INBAS , OUTBAS' >> ./logs/logpercentages$SRA_ID.txt
   echo $INBAS >> ./logs/logpercentages$SRA_ID.txt
   echo $OUTBAS >> ./logs/logpercentages$SRA_ID.txt
   echo 'Good Sequence percentage' >> ./logs/logpercentages$SRA_ID.txt
   echo "($OUTSEQ * 100) * $INSEQ" | bc -l >> ./logs/logpercentages$SRA_ID.txt
   echo 'Good Base percentage' >> ./logs/logpercentages$SRA_ID.txt
   echo "($OUTBAS * 100) * $INBAS" | bc -l >> ./logs/logpercentages$SRA_ID.txt

   cd ..

done

#############gmap#############
#
# Built using:
# http://manpages.ubuntu.com/manpages/bionic/man1/gmap.1.html
#
# Runs GMAP on the .fastq files from PrinSeq
# Outputs a .sam file per dataset, divided by project
"
# Necessary to build the genome using gmap_build

   PATH=$PATH:/data/biodata/tools/GMAP/src/
   export PATH #alter to match the localization of the gmap tool

counter=0
for direc in /data/biodata/454Data/*
do
   PROJECTNAME=`echo $direc | cut --delimiter=/ -f5`
   counter=$((counter+1))

   cd /data/biodata/454Data/$PROJECTNAME
   FILENAME=`ls | grep notag | cut -c6-14`
   echo ' '
   echo '~~~~~~~~~~~~' $counter $PROJECTNAME '|| GMAP' $FILENAME '~~~~~~~~~~~~'
   echo ' '
   echo '    ...thinking...'

   gmap -d QSuber2018 -t 6 -f samse -n 0 ./'ps'*.fastq > /data/biodata/454Data/$PROJECTNAME/gmap$FILENAME.sam 2> /data/biodata/454Data/$PROJECTNAME/logs/GMAPlog$FILENAME.txt
# -d , name of the genome built using gmap_build
# -t , number of threads
# -f , codification
# -n ,
# Appends results from gmap to a .sam file
# Creates a log of the results

   cd ..
done

#############samtools#############
#
# Built using:
# information in ESTsColdHeat_processing
#
# Runs samtools in the .sam files from gmap
# samtools view 'opens' the .sam file
# samtools sort sorts the .sam and outputs as a .bam

counter=0
for direc in /data/biodata/454Data/*
do
   counter=$((counter+1))
   PROJECTNAME=`echo $direc | cut --delimiter=/ -f5`

   cd /data/biodata/454Data/$PROJECTNAME
   FILENAME=`ls | grep notag | cut -c6-14`

   echo '~~~~~~~~~~~~' $counter $PROJECTNAME '|| SAMTOOLS' $FILENAME '~~~~~~~~~~~~'
   echo ' '
   echo '    ...thinking...'
   echo ' '

   samtools view -u *$FILENAME.sam | samtools sort -o st$FILENAME.bam
# -u , opens as uncompressed .sam file
# -o , outputs as a .bam file

   cd ..
done

#############featurecounts#############
#
# Built using:
# http://bioinf.wehi.edu.au/featureCounts/
#

   PATH=$PATH:/data/biodata/tools/SubRead/bin/
   export PATH #alter to match the localization of the featureCounts tool

counter=0
for direc in /data/biodata/454Data/*
do
   counter=$((counter+1))
   PROJECTNAME=`echo $direc | cut --delimiter=/ -f5`

   cd $direc
   echo ' '
   echo '~~~~~~~~~~~~' $counter $PROJECTNAME 'FEATURECOUNTS ~~~~~~~~~~~~'

   featureCounts -a /data/biodata/rawdata/CorkOak1.0_genomic.gtf -g gene_name -o 'counts'$PROJECTNAME'.txt' ./*.bam 2>&1 | tee -a ./logs/featurecountslog$PROJECTNAME.txt
# -a , annotation (gtf/gff)
# -g , category for the sorting of the alignment (gene_id/gene_name)
# -o , output as a .txt file
# 2>&1 | tee , will append to a log file and print it on the screen

   cd ..
done

#############stringtie#############
#
# Built using:
# https://ccb.jhu.edu/software/stringtie/index.shtml?t=manual
#
# Will give the TPM and FPKM in an abundance file
# Outputs a .gtf file
#
# Needs the indication of a reference genome as a .gtf file

   PATH=$PATH:/data/biodata/tools/StringTie
   export PATH #alter to match the localization of the stringtie tool

counter=0
for direc in /data/biodata/454Data/*
do
   counter=$((counter+1))
   PROJECTNAME=`echo $direc | cut --delimiter=/ -f5`

   cd $PROJECTNAME
   FILENAME=`ls | grep notag | cut -c6-14`
   echo '~~~~~~~~~~~~~' $counter $PROJECTNAME '|| STRINGTIE' $FILENAME '~~~~~~~~~~~~~'

   stringtie /data/biodata/454Data/$PROJECTNAME/*$FILENAME.bam -A /data/biodata/454Data/$PROJECTNAME/abundance$FILENAME -G /data/biodata/rawdata/CorkOak1.0_genomic.gtf -o /data/biodata/454Data/$PROJECTNAME/$FILENAME.gtf

   cd ..
done

for direc in /data/biodata/454Data/*
do
   PROJECTNAME=`echo $direc | cut --delimiter=/ -f5`
   cd $PROJECTNAME
   mkdir -p notag
   mkdir -p sickle
   mkdir -p prinseq
   mkdir -p gmap
   mkdir -p bam
   mkdir -p featurecounts
   mkdir -p stringtie

   mv sickle* ./sickle
   mv notag* ./notag
   mv *.bam ./bam
   mv *.sam ./gmap
   mv abundance* ./stringtie
   mv *gtf ./stringtie
   mv counts* ./featurecounts
   mv ps* ./prinseq
done

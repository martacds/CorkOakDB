#!/bin/bash
##
#
# Pipeline for 454 datasets of RNA-Seq.                Iteration for IC datasets.
#
# tagcleaner : predicts and removes the tags from the sequence
# sickle : removes low-quality sequence
# prinseq : removes right 5% (Ns), improves overall quality
# gmap : maps sequences to genome built previously (gmap_build)
# samtools : converts the .sam into .bam (sorted file)
# featureCounts : outputs raw counts of alignment
# stringtie : outputs TPM/FPKM counts
#
#
# Marta Silva, ITQB
# marcsilva@itqb.unl.pt
#
############# CONFIGURATION #############
#
HOME=/data/biodata       #'home' folder
DATA=/data/biodata/ICdata         #localization of the Data of the IC datasets
FASTQFILES=/data/biodata/ICdata/ICfastq         #localization of the .fastq files
BIO=/data/biodata/ICdata/BioProjects       #localization of the output folders for the BioProjects
LOGS=/data/biodata/ICdata/BioProjects/logs
FASTQDUMP=/data/biodata/tools/fastq-dump/bin
TAGCLEANER=/data/biodata/tools/TagCleaner
SICKLE=/data/biodata/tools/sickle-master
PRINSEQ=/data/biodata/tools/PrinSeq
GMAP=/data/biodata/tools/gmap-2018-07-04/bin
SAMTOOLS=/data/biodata/tools/samtools-1.9/bin
GTF=/data/biodata/rawdata
FEATURECOUNTS=/data/biodata/tools/SubRead/bin
STRINGTIE=/data/biodata/tools/StringTie

############# STARTING POINT #############

   cd $HOME
   mkdir -p ICdata
   mv /data/biodata/ICfastq $DATA
   cd $FASTQFILES
   ls | grep fastq | cut --delimiter=. -f1 >> $DATA/listfilenamesIC.txt
   cd $HOME
   cd $DATA
   mkdir -p BioProjects
   cd BioProjects
   mkdir -p logs

############ TAGCLEANER #############
#
# Built using:
# http://tagcleaner.sourceforge.net/manual.html#STANDALONE
#
# Predicts the tag 5' of the .fastq file
# If a tag is present it removes it. If there is no tag, nothing happens.
# In both cases it outputs a file with the prefix 'notag'
#
# Creates a log of the process
# Creates a file to log the numbers and percentages of each command.
# One percentages log per dataset

   PATH=$PATH:$TAGCLEANER
   export PATH

   alias tagcleaner='perl $TAGCLEANER/tagcleaner.pl'
Creates an alias, to make the command bellow easier

counter=0
input="$DATA/listfilenamesIC.txt"
while IFS= read -r FILENAME
do
   counter=$((counter+1))
   PROJECTNAME=`echo $FILENAME | cut -c1-2`

   cd $FASTQFILES

   echo ''
   echo '~~~~~~~~~~~~' $counter $PROJECTNAME '|| TAGCLEANER PREDICT' $FILENAME '~~~~~~~~~~~~'
   echo ' '
   echo '         ...predicting tag...'

   tagcleaner -verbose -fastq $FILENAME.sff.fastq -predict >> $LOGS/predict$FILENAME.txt

   if [ `grep -s tag5 $LOGS/predict$FILENAME.txt | cut -f2` ] ; then
   echo ' '
   echo '~~~~~~~~~~~~' $counter $PROJECTNAME '|| CLEANING TAG5' $FILENAME '~~~~~~~~~~~~'

   TAG=$(grep tag5 $LOGS/predict$FILENAME.txt | cut -f2)
   echo $TAG #echos the predicted tag
   NNN=$(echo "$TAG" | sed 's/N.*//')
   echo $NNN #removed Ns from predicted tag

   tagcleaner -verbose -fastq $FILENAME.sff.fastq -tag5 $NNN -mm5 1 -out $BIO/notag$FILENAME -log $LOGS/'tagcleanerlog'$FILENAME'.txt'

   cd ..

   else #iteration for datasets with no tags
   echo ' '
   echo '~~~~~~~~~~~~' $counter $PROJECTNAME '|| NO TAG' $FILENAME '~~~~~~~~~~~~'
   echo ' '

   cp *.fastq $BIO/'notag'$FILENAME'.fastq'

   echo '  copied with prefix'
   echo ' '
   echo 'TagCleaner' >> $LOGS/logpercentages$FILENAME.txt
   echo 'no sequences/bases removed' >> $LOGS/logpercentages$FILENAME.txt
   cd ..
   fi

done < "$input"

############# SICKLE #############
#
# Built using:
# https://github.com/najoshi/sickle
#
# Runs Sickle on the .fastq files form tagcleaner.
# Improves the overall quality of the dataset

   PATH=$PATH:$SICKLE
   export PATH #alter to match localization of sickle tool

counter=0
input="$DATA/listfilenamesIC.txt"
while IFS= read -r FILENAME
do
   counter=$((counter+1))
   PROJECTNAME=`echo $FILENAME | cut -c1-2`

   cd $BIO
   echo ' '
   echo '~~~~~~~~~~~~' $counter $PROJECTNAME '|| SICKLE' $FILENAME '~~~~~~~~~~~~'

   sickle se -q 20 -l 100 -f notag$FILENAME.fastq -t sanger -o 'sickle'$FILENAME.fastq | tee $LOGS/'sicklelog'$FILENAME'.txt'
# se (single end)- 454, illumina, pe (paired end) - illumina
# -q , quality threshold
# -l , length of window
# -f , input file as .fastq
# -t , codification
# -o , output file
# tee will append the stdout to a .txt file

done < "$input"

############# PRINSEQ #############
#
# Built using:
# http://prinseq.sourceforge.net/manual.html#STANDALONE
#
# Runs PrinSeq on the .fastq files from Sickle
# Trims in terms of quality (set as 20) from the left.
# Trims a % form the right (set as 5), which will remove the Ns from the end of the sequence
# Outputs good and bad sequences, and creates a log

   PATH=$PATH:$PRINSEQ
   export PATH #alter path to match the localization of the prinseq tool

   alias prinseq='perl $PRINSEQ/prinseq-lite.pl'
# Creates an alias to make the command bellow easier

counter=0
input="$DATA/listfilenamesIC.txt"
while IFS= read -r FILENAME
do
   counter=$((counter+1))
   PROJECTNAME=`echo $FILENAME | cut -c1-2`

   cd $BIO
   echo ' '
   echo '~~~~~~~~~~~~' $counter $PROJECTNAME '|| PRINSEQ' $FILENAME '~~~~~~~~~~~~'

   prinseq -verbose -trim_qual_left 20 -trim_right_p 5 -fastq sickle$FILENAME.fastq -out_good 'ps'$FILENAME -out_bad psBAD$FILENAME -log $LOGS/prinseqlog$FILENAME.txt

# -verbose , prints process progression to the screen
# -trim_qual_left , trims according to quality starting on the left
# -trim_right_p , trims right end according to percentage of sequence
# -fastq , input file is a .fastq file
# -out_good , outputs the 'good' sequences to a file matching the input
# -out_bad , outputs the 'bad' sequences to a file matching the input
# -log , creates a log of the process

   cd ..

done < "$input"

############# GMAP #############
#
# Built using:
# http://manpages.ubuntu.com/manpages/bionic/man1/gmap.1.html
#
# Runs GMAP on the .fastq files from PrinSeq
# Outputs a .sam file per dataset, divided by project
# Necessary to build the genome using gmap_build

   PATH=$PATH:$GMAP
   export PATH #alter to match the localization of the gmap tool

counter=0
input="$DATA/listfilenamesIC.txt"
while IFS= read -r FILENAME
do
   counter=$((counter+1))
   PROJECTNAME=`echo $FILENAME | cut -c1-2`

   cd $BIO

   echo ' '
   echo '~~~~~~~~~~~~' $counter $PROJECTNAME '|| GMAP' $FILENAME '~~~~~~~~~~~~'
   echo ' '
   echo '    ...mapping to genome...'

   gmap -d QSuber2018 -t 6 -f samse -n 0 $BIO/ps$FILENAME.fastq > ./$FILENAME.sam 2> $LOGS/GMAPlog$FILENAME.txt
# -d , name of the genome built using gmap_build
# -t , number of threads
# -f , codification
# -n ,
# Appends results from gmap to a .sam file
# Creates a log of the results

   cd ..
done < "$input"

############# SAMTOOLS #############
#
# Built using:
# information in ESTsColdHeat_processing
#
# Runs samtools in the .sam files from gmap
# samtools view 'opens' the .sam file
# samtools sort sorts the .sam and outputs as a .bam

   PATH=$PATH:$SAMTOOLS
   export PATH

counter=0
input="$DATA/listfilenamesIC.txt"
while IFS= read -r FILENAME
do
   counter=$((counter+1))
   PROJECTNAME=`echo $FILENAME | cut -c1-2`

   cd $BIO

   echo '~~~~~~~~~~~~' $counter $PROJECTNAME '|| SAMTOOLS' $FILENAME '~~~~~~~~~~~~'
   echo ' '
   echo '    ...converting .sam into sorted .bam...'
   echo ' '

   $SAMTOOLS/samtools view -bS $FILENAME.sam | $SAMTOOLS/samtools sort -o $FILENAME.bam

   cd ..
done < "$input"

############# FEATURECOUNTS #############
#
# Built using:
# http://bioinf.wehi.edu.au/featureCounts/
#

   PATH=$PATH:$FEATURECOUNTS
   export PATH #alter to match the localization of the featureCounts tool

counter=0
for direc in $BIO
do
   counter=$((counter+1))

   cd $BIO
   echo ' '
   echo '~~~~~~~~~~~~' $counter 'IC || FEATURECOUNTS ~~~~~~~~~~~~'

   featureCounts -a $GTF/CorkOak1.0_genomic.gtf -g gene_name -o 'countsIC.txt' $BIO/*'.bam' 2>&1 | tee -a $LOGS/featurecountslogIC.txt
# -a , annotation (gtf/gff)
# -g , category for the sorting of the alignment (gene_id/gene_name)
# -o , output as a .txt file
# 2>&1 | tee , will append to a log file and print it on the screen

   cd ..
done

############# STRINGTIE #############
#
# Built using:
# https://ccb.jhu.edu/software/stringtie/index.shtml?t=manual
#
# Will give the TPM and FPKM in an abundance file
# Outputs a .gtf file
#
# Needs the indication of a reference genome as a .gtf file

   PATH=$PATH:$STRINGTIE
   export PATH #alter to match the localization of the stringtie tool

counter=0
input="$DATA/listfilenamesIC.txt"
while IFS= read -r FILENAME
do
   counter=$((counter+1))
   PROJECTNAME=`echo $FILENAME | cut -c1-2`

   cd $BIO

   echo '~~~~~~~~~~~~~' $counter $PROJECTNAME '|| STRINGTIE' $FILENAME '~~~~~~~~~~~~~'
   echo ' '
   echo '      ...calculating TPM/FPKM...'
   echo ' '

   stringtie $BIO/$FILENAME'.bam' -e -B -A $BIO/abundance$FILENAME -G $GTF/CorkOak1.0_genomic.gtf -o $BIO/$FILENAME'.gtf'

   cd ..
done < "$input"

############# HOUSEKEEPING #############
#
for direc in $BIO
do
   cd $BIO

   mkdir -p notag
   mkdir -p sickle
   mkdir -p prinseq
   mkdir -p gmap
   mkdir -p bam
   mkdir -p featurecounts
   mkdir -p stringtie

   mv sickle* ./sickle
   mv notag* ./notag
   mv *.bam ./bam
   mv *.sam ./gmap
   mv abundance* ./stringtie
   mv *.gtf ./stringtie
   mv counts* ./featurecounts
   mv ps* ./prinseq
   mv *ctab ./stringtie

done
